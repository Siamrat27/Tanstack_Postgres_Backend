// /api/login.ts
import { createFileRoute } from "@tanstack/react-router";
import { prisma } from "@/db";
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken"; // <-- 1. Import jwt

export const Route = createFileRoute("/api/login")({
  server: {
    handlers: {
      // (‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ POST ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ login)
      POST: async ({ request }) => {
        const body = await request.json();
        const { username, password } = body;

        // --- 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ ---
        if (!username || !password) {
          return new Response(JSON.stringify({
            success: false,
            error: "Username and password are required",
          }), {
            status: 400, // 400 Bad Request
            headers: { "Content-Type": "application/json" },
          });
        }

        // --- 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ User ---
        const user = await prisma.user.findUnique({
          where: { username: username },
        });

        // üõ°Ô∏è (Security)
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ user ‡∏´‡∏£‡∏∑‡∏≠ user ‡πÑ‡∏°‡πà‡∏°‡∏µ hash (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤)
        // ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 401 ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏≤ username
        if (!user || !user.password_hash) {
          return new Response(JSON.stringify({
            success: false,
            error: "Invalid username or password",
          }), {
            status: 401, // 401 Unauthorized
            headers: { "Content-Type": "application/json" },
          });
        }

        // --- 4. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ---
        const isMatch = await bcrypt.compare(password, user.password_hash);

        // üõ°Ô∏è (Security)
        // ‡∏ñ‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á
        if (!isMatch) {
          return new Response(JSON.stringify({
            success: false,
            error: "Invalid username or password",
          }), {
            status: 401, // 401 Unauthorized
            headers: { "Content-Type": "application/json" },
          });
        }

        // --- 5. Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ---
        const secret = process.env.JWT_SECRET;
        if (!secret) {
            console.error("JWT_SECRET is not defined in .env file");
            return new Response(JSON.stringify({
                success: false,
                error: "Server configuration error",
            }), { status: 500 });
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á "Payload" ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô Token
        // (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏±‡∏ö ‡πÄ‡∏ä‡πà‡∏ô password_hash)
        const payload = {
            id: user.id,
            username: user.username,
            role: user.role, // <-- field 'role' ‡∏à‡∏≤‡∏Å schema ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        };

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Token ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏ 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (1h)
        const token = jwt.sign(payload, secret, { expiresIn: '1h' });

        // --- 6. ‡∏™‡πà‡∏á Token ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ Client ---
        return new Response(JSON.stringify({
          success: true,
          token: token,
          user: payload // (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ú‡∏∑‡πà‡∏≠ frontend ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ)
        }), {
          status: 200, // 200 OK
          headers: { "Content-Type": "application/json" },
        });
      },
    },
  },
});